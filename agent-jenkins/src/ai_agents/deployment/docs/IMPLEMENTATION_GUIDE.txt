================================================================================
                    GUIDE D'IMPL√âMENTATION - API AI AGENTS
================================================================================

Ce document explique en d√©tail l'impl√©mentation de l'API REST pour le framework
AI Agents, les fonctions cr√©√©es, et les relations entre les fichiers.

================================================================================
1. ARCHITECTURE G√âN√âRALE
================================================================================

L'API suit une architecture en couches :

‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                        COUCHE PR√âSENTATION                     ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ   main.py       ‚îÇ  ‚îÇ  start_api.py   ‚îÇ  ‚îÇ   routes/       ‚îÇ ‚îÇ
‚îÇ  ‚îÇ (FastAPI App)   ‚îÇ  ‚îÇ  (D√©marrage)    ‚îÇ  ‚îÇ (Endpoints)     ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                        COUCHE M√âTIER                           ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ   services/     ‚îÇ  ‚îÇ    models/      ‚îÇ  ‚îÇ     core/       ‚îÇ ‚îÇ
‚îÇ  ‚îÇ (Logique)       ‚îÇ  ‚îÇ (Validation)    ‚îÇ  ‚îÇ (Configuration) ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
                                ‚îÇ
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ                        COUCHE DONN√âES                          ‚îÇ
‚îÇ  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê  ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê ‚îÇ
‚îÇ  ‚îÇ Agent Registry  ‚îÇ  ‚îÇ  Memory Store   ‚îÇ  ‚îÇ   File System   ‚îÇ ‚îÇ
‚îÇ  ‚îÇ (Agents)        ‚îÇ  ‚îÇ (Ex√©cutions)    ‚îÇ  ‚îÇ (Configs)       ‚îÇ ‚îÇ
‚îÇ  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò

================================================================================
2. STRUCTURE DES FICHIERS ET LEURS R√îLES
================================================================================

üìÅ api_agent/
‚îú‚îÄ‚îÄ üìÑ main.py                    # Point d'entr√©e FastAPI principal
‚îú‚îÄ‚îÄ üöÄ start_api.py               # Script de d√©marrage du serveur
‚îú‚îÄ‚îÄ ‚ö° quick_start.py             # D√©marrage rapide avec v√©rifications
‚îú‚îÄ‚îÄ üîß test_config.py             # Test de configuration
‚îú‚îÄ‚îÄ üé¨ demo.py                    # D√©monstration des fonctionnalit√©s
‚îú‚îÄ‚îÄ üéä final_demo.py              # D√©monstration finale compl√®te
‚îú‚îÄ‚îÄ üìö README.md                  # Documentation utilisateur
‚îú‚îÄ‚îÄ üìù IMPLEMENTATION_GUIDE.txt   # Ce fichier (guide technique)
‚îÇ
‚îú‚îÄ‚îÄ üìÅ core/                      # Configuration et utilitaires
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ config.py                 # Settings Pydantic (OPENAI_API_KEY, etc.)
‚îÇ   ‚îî‚îÄ‚îÄ logging.py                # Configuration des logs
‚îÇ
‚îú‚îÄ‚îÄ üìÅ api/                       # Couche API (routes et mod√®les)
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îú‚îÄ‚îÄ üìÅ models/                # Mod√®les Pydantic pour validation
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ agent.py              # Mod√®les d'agents et ex√©cutions
‚îÇ   ‚îî‚îÄ‚îÄ üìÅ routes/                # Endpoints FastAPI
‚îÇ       ‚îú‚îÄ‚îÄ __init__.py
‚îÇ       ‚îî‚îÄ‚îÄ agents.py             # Routes pour gestion des agents
‚îÇ
‚îú‚îÄ‚îÄ üìÅ services/                  # Logique m√©tier
‚îÇ   ‚îú‚îÄ‚îÄ __init__.py
‚îÇ   ‚îî‚îÄ‚îÄ agent_service.py          # Service principal de gestion d'agents
‚îÇ
‚îî‚îÄ‚îÄ üìÅ examples/                  # Exemples et clients
    ‚îî‚îÄ‚îÄ api_examples.py           # Client Python et exemples d'usage

================================================================================
3. D√âTAIL DES FICHIERS PRINCIPAUX
================================================================================

3.1. main.py - Application FastAPI
----------------------------------
R√îLE : Point d'entr√©e principal de l'application FastAPI

FONCTIONS CL√âS :
- create_app() : Cr√©e et configure l'application FastAPI
- lifespan() : Gestionnaire du cycle de vie de l'application
- Configuration CORS pour permettre les requ√™tes cross-origin
- Inclusion des routes d'agents
- Endpoints de base (/, /health)

RELATIONS :
- Importe les routes depuis api/routes/agents.py
- Utilise la configuration depuis core/config.py
- Configure le logging via core/logging.py

3.2. core/config.py - Configuration
-----------------------------------
R√îLE : Gestion centralis√©e de la configuration avec Pydantic

CLASSES :
- Settings : Mod√®le Pydantic pour toutes les configurations

CHAMPS PRINCIPAUX :
- HOST, PORT : Configuration serveur
- DEBUG, LOG_LEVEL : Configuration debug et logs
- OPENAI_API_KEY : Cl√© API OpenAI (OBLIGATOIRE)
- ALLOWED_HOSTS : Configuration CORS
- MAX_EXECUTION_TIME : Timeout des ex√©cutions
- AGENTS_CONFIG_DIR : R√©pertoire des configurations d'agents

FONCTION :
- get_settings() : Singleton pour obtenir la configuration

PROBL√àME R√âSOLU :
Le champ OPENAI_API_KEY a √©t√© ajout√© pour r√©soudre l'erreur Pydantic
"Extra inputs are not permitted" que vous rencontriez.

3.3. services/agent_service.py - Logique m√©tier
-----------------------------------------------
R√îLE : Service principal g√©rant toute la logique des agents

CLASSE PRINCIPALE : AgentService

ATTRIBUTS :
- running_agents : Dict des agents en cours d'ex√©cution
- agent_runs : Dict de toutes les ex√©cutions (persistance m√©moire)
- settings : Configuration de l'application

M√âTHODES PRINCIPALES :

list_agents() -> List[AgentInfo]
  ‚Ä¢ Liste tous les agents disponibles depuis AGENT_REGISTRY
  ‚Ä¢ Cr√©e des objets AgentInfo avec m√©tadonn√©es

get_agent_details(agent_id) -> AgentDetailedInfo
  ‚Ä¢ Obtient les d√©tails complets d'un agent
  ‚Ä¢ Charge la configuration depuis le fichier YAML
  ‚Ä¢ Retourne config + m√©tadonn√©es

get_agent_config(agent_id) -> AgentConfig
  ‚Ä¢ Retourne uniquement la configuration d'un agent
  ‚Ä¢ Extrait workflow, state_schema, memory, model

execute_agent(agent_id, run_id, input_data, config_override, timeout)
  ‚Ä¢ FONCTION C≈íUR : Ex√©cute un agent de mani√®re asynchrone
  ‚Ä¢ G√®re le cycle de vie complet d'une ex√©cution
  ‚Ä¢ Applique les timeouts et surcharges de configuration
  ‚Ä¢ Persiste les r√©sultats dans agent_runs

get_agent_status(agent_id, run_id) -> AgentStatusResponse
  ‚Ä¢ Retourne le statut actuel d'un agent
  ‚Ä¢ G√®re les agents en cours ET termin√©s
  ‚Ä¢ Trouve automatiquement la derni√®re ex√©cution si run_id non sp√©cifi√©

list_agent_runs(agent_id) -> List[AgentRunResponse]
  ‚Ä¢ Liste toutes les ex√©cutions d'un agent
  ‚Ä¢ Tri√©es par date (plus r√©cent en premier)

get_run_details(agent_id, run_id) -> AgentRunResponse
  ‚Ä¢ D√©tails d'une ex√©cution sp√©cifique
  ‚Ä¢ Inclut logs de debug pour troubleshooting

cancel_run(agent_id, run_id) -> bool
  ‚Ä¢ Annule une ex√©cution en cours
  ‚Ä¢ Met √† jour le statut et nettoie les ressources

SINGLETON PATTERN :
Le service utilise un pattern singleton dans les routes pour persister
les donn√©es d'ex√©cution entre les requ√™tes HTTP.

3.4. api/models/agent.py - Mod√®les de donn√©es
---------------------------------------------
R√îLE : D√©finition des mod√®les Pydantic pour validation et s√©rialisation

ENUMS :
- AgentStatus : idle, running, completed, failed, cancelled
- AgentType : sales_assistant, supervisor, research

MOD√àLES PRINCIPAUX :

AgentInfo
  ‚Ä¢ Informations de base d'un agent
  ‚Ä¢ Champs : id, name, type, description, version, status

AgentConfig
  ‚Ä¢ Configuration compl√®te d'un agent
  ‚Ä¢ Champs : workflow, state_schema, memory, model

AgentDetailedInfo (h√©rite d'AgentInfo)
  ‚Ä¢ Informations d√©taill√©es + configuration
  ‚Ä¢ Ajoute : config, created_at, updated_at

AgentRunRequest
  ‚Ä¢ Requ√™te pour lancer un agent
  ‚Ä¢ Champs : input_data, config_override, timeout

AgentRunResponse
  ‚Ä¢ R√©ponse d'ex√©cution d'agent
  ‚Ä¢ Champs : run_id, agent_id, status, started_at, completed_at,
           result, error, logs

AgentStatusResponse
  ‚Ä¢ Statut d'un agent
  ‚Ä¢ Champs : agent_id, run_id, status, last_activity, current_run

AgentListResponse
  ‚Ä¢ Liste d'agents
  ‚Ä¢ Champs : agents, total

ErrorResponse
  ‚Ä¢ Mod√®le d'erreur standardis√©
  ‚Ä¢ Champs : error, detail, code

3.5. api/routes/agents.py - Endpoints REST
------------------------------------------
R√îLE : D√©finition des endpoints HTTP pour l'API

SINGLETON SERVICE :
- get_agent_service() : Retourne une instance singleton d'AgentService
  pour persister les donn√©es entre requ√™tes

ENDPOINTS IMPL√âMENT√âS :

GET /api/agents
  ‚Ä¢ Liste tous les agents disponibles
  ‚Ä¢ Retourne : AgentListResponse

GET /api/agents/{agent_id}
  ‚Ä¢ D√©tails d'un agent sp√©cifique
  ‚Ä¢ Retourne : AgentDetailedInfo
  ‚Ä¢ Erreur 404 si agent inexistant

GET /api/agents/{agent_id}/config
  ‚Ä¢ Configuration d'un agent
  ‚Ä¢ Retourne : AgentConfig
  ‚Ä¢ Erreur 404 si agent inexistant

POST /api/agents/{agent_id}/run
  ‚Ä¢ Lance l'ex√©cution d'un agent
  ‚Ä¢ Body : AgentRunRequest
  ‚Ä¢ Retourne : AgentRunResponse (statut initial)
  ‚Ä¢ Ex√©cution en arri√®re-plan via BackgroundTasks

GET /api/agents/{agent_id}/status
  ‚Ä¢ Statut d'un agent
  ‚Ä¢ Query param optionnel : run_id
  ‚Ä¢ Retourne : AgentStatusResponse

GET /api/agents/{agent_id}/runs
  ‚Ä¢ Liste toutes les ex√©cutions d'un agent
  ‚Ä¢ Retourne : List[AgentRunResponse]

GET /api/agents/{agent_id}/runs/{run_id}
  ‚Ä¢ D√©tails d'une ex√©cution sp√©cifique
  ‚Ä¢ Retourne : AgentRunResponse
  ‚Ä¢ Erreur 404 si run inexistant

DELETE /api/agents/{agent_id}/runs/{run_id}
  ‚Ä¢ Annule une ex√©cution en cours
  ‚Ä¢ Retourne : Message de confirmation

GESTION D'ERREURS :
- Validation automatique via Pydantic
- Gestion des exceptions avec messages clairs
- Codes HTTP appropri√©s (404, 422, 500)
- Logging des erreurs pour debug

================================================================================
4. FLUX D'EX√âCUTION D'UN AGENT
================================================================================

1. CLIENT fait POST /api/agents/{agent_id}/run
   ‚Üì
2. ROUTE agents.py valide la requ√™te (Pydantic)
   ‚Üì
3. ROUTE v√©rifie que l'agent existe via agent_service.agent_exists()
   ‚Üì
4. ROUTE g√©n√®re un run_id unique (UUID)
   ‚Üì
5. ROUTE lance agent_service.execute_agent() en arri√®re-plan
   ‚Üì
6. ROUTE retourne imm√©diatement AgentRunResponse (status: running)
   ‚Üì
7. SERVICE charge l'agent depuis AGENT_REGISTRY
   ‚Üì
8. SERVICE applique config_override si fournie
   ‚Üì
9. SERVICE ex√©cute agent.run(input_data) avec timeout
   ‚Üì
10. SERVICE met √† jour agent_runs avec le r√©sultat
    ‚Üì
11. CLIENT peut interroger GET /api/agents/{agent_id}/status pour suivre

================================================================================
5. GESTION DE LA PERSISTANCE
================================================================================

PROBL√àME INITIAL :
Les donn√©es d'ex√©cution n'√©taient pas persist√©es entre les requ√™tes car
un nouveau AgentService √©tait cr√©√© √† chaque appel.

SOLUTION IMPL√âMENT√âE :
- Pattern Singleton dans get_agent_service()
- Instance globale _agent_service conserv√©e en m√©moire
- Dictionnaires agent_runs et running_agents persistent les donn√©es

STRUCTURE DES DONN√âES :
agent_runs = {
    "sales_assistant": {
        "run-id-1": AgentRunResponse(...),
        "run-id-2": AgentRunResponse(...),
    },
    "research": {
        "run-id-3": AgentRunResponse(...),
    }
}

running_agents = {
    "sales_assistant": {
        "run_id": "run-id-1",
        "started_at": datetime,
        "status": AgentStatus.RUNNING
    }
}

LIMITATIONS :
- Persistance en m√©moire uniquement (perdue au red√©marrage)
- Pour la production : utiliser Redis, PostgreSQL, ou autre DB

================================================================================
6. SCRIPTS UTILITAIRES
================================================================================

6.1. start_api.py
-----------------
- D√©marre le serveur Uvicorn
- Affiche les informations de configuration
- Gestion d'erreurs avec messages d'aide

6.2. test_config.py
-------------------
- Valide la configuration avant d√©marrage
- Teste les imports et d√©pendances
- V√©rifie OPENAI_API_KEY

6.3. quick_start.py
-------------------
- Script interactif de d√©marrage
- V√©rifications automatiques
- Lance le serveur ET la d√©monstration

6.4. demo.py / final_demo.py
----------------------------
- D√©monstrations compl√®tes des fonctionnalit√©s
- Tests de tous les endpoints
- Exemples d'utilisation r√©elle

6.5. examples/api_examples.py
-----------------------------
- Client Python pour l'API
- Classe AgentAPIClient avec toutes les m√©thodes
- Exemples d'utilisation basique et avanc√©e
- Gestion d'erreurs

================================================================================
7. POINTS TECHNIQUES IMPORTANTS
================================================================================

7.1. Gestion Asynchrone
-----------------------
- FastAPI avec async/await
- BackgroundTasks pour ex√©cutions longues
- asyncio.wait_for() pour timeouts

7.2. Validation des Donn√©es
---------------------------
- Pydantic pour validation automatique
- Mod√®les typ√©s pour toutes les entr√©es/sorties
- Gestion d'erreurs 422 automatique

7.3. Configuration
------------------
- Pydantic Settings avec .env
- Variables d'environnement
- Validation des types

7.4. Logging
------------
- Logging structur√©
- Niveaux configurables
- Logs d'ex√©cution pour debug

7.5. CORS
---------
- Configuration pour d√©veloppement
- Permettre requ√™tes cross-origin

================================================================================
8. EXTENSIONS POSSIBLES
================================================================================

- Authentification JWT
- Base de donn√©es pour persistance
- WebSockets pour notifications temps r√©el
- M√©triques et monitoring
- Rate limiting
- Cache Redis
- Tests unitaires et d'int√©gration
- Documentation OpenAPI enrichie

================================================================================
FIN DU GUIDE D'IMPL√âMENTATION
================================================================================
